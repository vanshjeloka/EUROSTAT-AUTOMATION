import re
import openpyxl
from collections import defaultdict
from openpyxl.utils import get_column_letter
from openpyxl.styles import PatternFill, Border, Side, Font, Alignment
import os
import tkinter as tk
from tkinter import filedialog, messagebox
from openpyxl.styles.borders import Border, Side
from calendar import month_name
from collections import defaultdict
from openpyxl import load_workbook, Workbook

header_fill = PatternFill(start_color="5B9BD5", end_color="5B9BD5", fill_type="solid")
col1_fill = PatternFill(start_color="DDEBF7", end_color="DDEBF7", fill_type="solid")
total_fill = PatternFill(start_color="FFF2CC", end_color="FFF2CC", fill_type="solid")

debug_log = []

def log_debug(message, is_error=False):
    emoji = "‚ùå" if is_error else "‚úÖ"
    debug_log.append(f"{emoji} {message}")

root = tk.Tk()
root.withdraw()
folder = filedialog.askdirectory(title="Select folder containing Excel files")
if not folder:
    messagebox.showinfo("Info", "No folder selected. Exiting.")
    exit()

log_debug(f"üìÅ Selected folder: {folder}")

excel_files = [f for f in os.listdir(folder) if f.endswith('.xlsx') and not f.startswith('~$')]

if not excel_files:
    log_debug("No Excel files found in the folder", is_error=True)
    exit()

log_debug(f"üìä Found {len(excel_files)} Excel files to process")

for filename in excel_files:
    filepath = os.path.join(folder, filename)
    log_debug(f"üîÑ Processing '{filename}'")
    try:
        workbook = openpyxl.load_workbook(filepath)
        log_debug(f"üìñ Loaded workbook '{filename}'")

        sheets_to_process = ["Sheet 1", "Sheet 2", "Sheet 3", "Sheet 4"]

        results = defaultdict(lambda: defaultdict(lambda: [dict(import_qty=0, import_val=0, export_qty=0, export_val=0) for _ in sheets_to_process]))

        # For collecting all unique partners and dates
        all_partners = set()
        all_dates = set()

        for sheet_idx, sheet_name in enumerate(sheets_to_process):
            if sheet_name not in workbook.sheetnames:
                log_debug(f"Sheet '{sheet_name}' not found, skipping", is_error=True)
                continue

            sheet = workbook[sheet_name]

            header_row = 11
            # Collect columns grouped by date, each group has 4 cols
            date_to_cols = defaultdict(list)

            col = 1
            while col <= sheet.max_column:
                cell_value = sheet.cell(row=header_row, column=col).value
                if isinstance(cell_value, str):
                    cell_str = cell_value.strip()
                    match = re.match(r"\d{4}-\d{2}", cell_str)
                    if match:
                        date_to_cols[match.group()].append(col)
                col += 1
            
            for row in range(13, sheet.max_row + 1):
                partner = sheet.cell(row=row, column=1).value
                if not partner:
                    continue
                unwanted_partners = {
                    "Extra-EU (= 'WORLD' - 'EU_INTRA')",
                    "Extra-EU27 (= 'WORLD' - 'EU27_2020_INTRA')",
                    "Extra-euro area (= 'WORLD' - 'EUROZONE_INTRA')",
                    "Extra-euro area - 19 countries (= 'WORLD' - 'EA19_INTRA')",
                    "Extra-euro area - 20 countries (= 'WORLD' - 'EA20_INTRA')",
                    "All countries of the world",
                    "Intra-EU (AT-01/1995, BE-01/1958, BG-01/2007, CY-05/2004, CZ-05/2004, DE-01/1958, DK-01/1973, EE-05/2004, ES-01/1986, FI-01/1995, FR-01/1958, GB-01/1973->01/2020, GR-01/1981, HR-07/2013, HU-05/2004, IE-01/1973, IT-01/1958, LT-05/2004, LU-01/1958, LV-05/2004, MT-05/2004, NL-01/1958, PL-05/2004, PT-01/1986, RO-01/2007, SE-01/1995, SI-05/2004, SK-05/2004, QR-01/1993, QV-01/1993, QY-01/1988)",
                    "Intra-EU27 (AT, BE, BG, CY, CZ, DE, DK, EE, ES, FI, FR, GR, HR, HU, IE, IT, LT, LU, LV, MT, NL, PL, PT, RO, SE, SI, SK, QR, QV, QY)",
                    "Intra-euro area (AT-01/1999, BE-01/1999, CY-01/2008, DE-01/1999, EE-01/2011, ES-01/1999, FI-01/1999, FR-01/1999, GR-01/2001, HR-01/2023, IE-01/1999, IT-01/1999, LT-01/2015, LU-01/1999, LV-01/2014, MT-01/2008, NL-01/1999, PT-01/1999, SI-01/2007, SK-01/2009, QR-01/1999, QV-01/1999, QY-01/1999)",
                    "Intra-euro area - 19 countries (AT, BE, CY, DE, EE, ES, FI, FR, GR, IE, IT, LT, LU, LV, MT, NL, PT, SI, SK, QR, QV, QY)",
                    "Intra-euro area - 20 countries (AT, BE, CY, DE, EE, ES, FI, FR, GR, HR, IE, IT, LT, LU, LV, MT, NL, PT, SI, SK, QR, QV, QY)"
                }
                if partner in unwanted_partners:
                    continue
                all_partners.add(partner)

                for date, cols in date_to_cols.items():
                    all_dates.add(date)
                    # Sum values for this partner/date/sheet across all column groups for that date
                    def get_val(c):
                        v = sheet.cell(row=row, column=c).value
                        if isinstance(v, (int, float)):
                            return v
                        if isinstance(v, str):
                            try:
                                return float(v.replace(",", "").replace(":", "").strip())
                            except:
                                return 0
                        return 0

                    # Initialize sums
                    import_qty_sum = 0
                    import_val_sum = 0
                    export_qty_sum = 0
                    export_val_sum = 0

                    # Sum columns per date per sheet directly as per new logic
                    if sheet_idx == 0:
                        import_qty_sum = sum(get_val(c) for c in cols) / 10
                    elif sheet_idx == 1:
                        import_val_sum = sum(get_val(c) for c in cols)
                    elif sheet_idx == 2:
                        export_qty_sum = sum(get_val(c) for c in cols) / 10
                    elif sheet_idx == 3:
                        export_val_sum = sum(get_val(c) for c in cols)

                    results[partner][date][sheet_idx] = {
                        'import_qty': import_qty_sum,
                        'import_val': import_val_sum,
                        'export_qty': export_qty_sum,
                        'export_val': export_val_sum
                    }

        # Sort partners and dates for output
        def partner_total_import_qty(partner):
            total = 0
            for date in all_dates:
                total += results[partner][date][0].get('import_qty', 0)
                total += results[partner][date][2].get('import_qty', 0)
            return total

        all_partners = sorted(all_partners, key=partner_total_import_qty, reverse=True)
        all_dates = sorted(all_dates)

        # Prepare output sheet
        if "CombinedSummary" in workbook.sheetnames:
            del workbook["CombinedSummary"]
        out_sheet = workbook.create_sheet("CombinedSummary")

        # Write data rows with each sheet's value in its own column, divided by 10 for import_qty and export_qty only
        for partner in all_partners:
            row_data = [partner]
            for date in all_dates:
                import_qty = results[partner][date][0].get('import_qty', 0) - results[partner][date][0].get('export_qty', 0)
                import_val = results[partner][date][1].get('import_val', 0) - results[partner][date][1].get('export_val', 0)
                export_qty = results[partner][date][2].get('import_qty', 0) - results[partner][date][2].get('export_qty', 0)
                export_val = results[partner][date][3].get('import_val', 0) - results[partner][date][3].get('export_val', 0)

                row_data.extend([
                    import_qty,
                    import_val,
                    export_qty,
                    export_val
                ])
            out_sheet.append(row_data)
            last_row = out_sheet.max_row
            for col_idx in range(2, out_sheet.max_column + 1):
                cell = out_sheet.cell(row=last_row, column=col_idx)
                cell.number_format = '#,##0;-#,##0'

        # --- Add medium vertical borders to CombinedSummary after each month group of 4 columns ---
        medium_side = Side(style="medium")
        medium_border = Border(right=medium_side)

        # Define a full medium border for convenience
        full_border = Border(left=medium_side, right=medium_side, top=medium_side, bottom=medium_side)
        for date_idx, date in enumerate(all_dates):
            col_end = 1 + (date_idx + 1) * 4  # 1-based: first col = partner, months start at 2
            for row_idx in range(1, out_sheet.max_row + 1):
                cell = out_sheet.cell(row=row_idx, column=col_end)
                cell.border = Border(
                    left=cell.border.left,
                    right=medium_side,
                    top=cell.border.top,
                    bottom=cell.border.bottom,
                )

        # Dynamically construct headers and rows for any number of detected months
        # Dynamically build headers based on all_dates
        header = ["Partner"]
        for date in all_dates:
            header.extend([
                f"{date} Import Qty",
                f"{date} Import Val",
                f"{date} Export Qty",
                f"{date} Export Val"
            ])
        out_sheet.insert_rows(1)
        for col_idx, header_value in enumerate(header, start=1):
            out_sheet.cell(row=1, column=col_idx, value=header_value)

        # Create Italy Market Style sheet (with dynamic naming)
        structure_sheet = workbook["Structure"]
        raw_country = structure_sheet["C5"].value or "Country"
        country = re.sub(r"\s*\(.*?\)", "", raw_country).strip()
        sheet_name = f"{country} market"
        num_months = len(all_dates)

        if sheet_name in workbook.sheetnames:
            del workbook[sheet_name]
        italy_sheet = workbook.create_sheet(sheet_name)

        # Insert two rows at the top
        italy_sheet.insert_rows(1, amount=2)

        # Write the message in cell A2
        italy_sheet["A2"] = f"{country} market for the last {num_months} months"
        # Merge A2:C2
        italy_sheet.merge_cells("A2:C2")
        # Apply bold font to merged cell A2
        italy_sheet["A2"].font = Font(bold=True)
        # Apply deep blue header_fill to A3 and A4 explicitly
        italy_sheet["A3"].fill = header_fill
        italy_sheet["A4"].fill = header_fill

        # First header row: merge 3 columns per date with the date as title
        italy_sheet.merge_cells(start_row=3, start_column=1, end_row=4, end_column=1)
        italy_sheet.cell(row=3, column=1, value="PRODUCT (Labels)")
        italy_sheet.column_dimensions["A"].width = 20
        # Apply full border to merged PRODUCT (Labels) cell A3:A4
        for row in range(3, 5):
            cell = italy_sheet.cell(row=row, column=1)
            cell.border = full_border
        # After borders to PRODUCT (Labels), add medium bottom border to A4
        cell_4_1 = italy_sheet.cell(row=4, column=1)
        cell_4_1.border = Border(
            left=cell_4_1.border.left,
            right=cell_4_1.border.right,
            top=cell_4_1.border.top,
            bottom=Side(style="medium")
        )

        # Dynamically create multi-level headers for all detected months
        col_idx = 2
        for date in all_dates:
            italy_sheet.merge_cells(start_row=3, start_column=col_idx, end_row=3, end_column=col_idx+2)
            italy_sheet.cell(row=3, column=col_idx, value=date)
            italy_sheet.cell(row=4, column=col_idx, value="MT")
            italy_sheet.cell(row=4, column=col_idx + 1, value="‚Ç¨")
            italy_sheet.cell(row=4, column=col_idx + 2, value="‚Ç¨/MT")
            col_idx += 3

        # Apply light blue fill to header rows 3 and 4
        for row in italy_sheet.iter_rows(min_row=3, max_row=4, max_col=italy_sheet.max_column):
            for cell in row:
                cell.fill = header_fill

        bold_font = Font(bold=True)
        for row in italy_sheet.iter_rows(min_row=3, max_row=4, max_col=italy_sheet.max_column):
            for cell in row:
                cell.font = bold_font

        # Center align header rows 3 and 4
        center_align = Alignment(horizontal='center')
        for row in italy_sheet.iter_rows(min_row=3, max_row=4, max_col=italy_sheet.max_column):
            for cell in row:
                cell.alignment = center_align

        # Insert TOTAL MARKET row at the top
        total_row = ["TOTAL MARKET"]
        for date in all_dates:
            total_mt = 0
            total_euro = 0
            for partner in all_partners:
                mt = results[partner][date][0].get('import_qty', 0) - results[partner][date][2].get('export_qty', 0)
                euro = results[partner][date][1].get('import_val', 0) - results[partner][date][3].get('export_val', 0)

                total_mt += mt
                total_euro += euro
            per_mt = round(total_euro / total_mt, 2) if total_mt != 0 else 0
            total_row.extend([total_mt, total_euro, per_mt])
        italy_sheet.insert_rows(5)
        for col_index, val in enumerate(total_row, start=1):
            cell = italy_sheet.cell(row=5, column=col_index, value=val if val != 0 else "-")
            cell.fill = total_fill
            cell.font = Font(bold=True)
        # Apply full border to TOTAL MARKET row (row 5)
        for col_idx in range(1, italy_sheet.max_column + 1):
            cell = italy_sheet.cell(row=5, column=col_idx)
            cell.border = full_border
        # After borders to TOTAL MARKET row, add thick top border to all its cells
        for col_idx in range(1, italy_sheet.max_column + 1):
            cell = italy_sheet.cell(row=5, column=col_idx)
            cell.border = Border(
                left=cell.border.left,
                right=cell.border.right,
                top=Side(style="medium"),
                bottom=cell.border.bottom
            )
        for col_idx in range(2, italy_sheet.max_column + 1):
            cell = italy_sheet.cell(row=5, column=col_idx)
            cell.number_format = '#,##0;(#,##0)'

        # Remove fill color from the cell below total market: row 6, column 1
        italy_sheet.cell(row=6, column=1).fill = PatternFill(fill_type=None)

        # Write "PRODUCTION" in cell A6 before appending partner data rows
        italy_sheet["A6"] = "PRODUCTION"
        # Apply full border to PRODUCTION cell (A6)
        italy_sheet["A6"].border = full_border
        # After border to PRODUCTION cell, add thick top border to it
        cell = italy_sheet["A6"]
        cell.border = Border(
            left=cell.border.left,
            right=cell.border.right,
            top=Side(style="medium"),
            bottom=cell.border.bottom
        )

        # Replace two lines with single line as per instruction
        italy_sheet["A7"] = "import net of export"
        # Merge the entire row 7 (from column 1 to max column)
        max_col = italy_sheet.max_column
        italy_sheet.merge_cells(start_row=7, start_column=1, end_row=7, end_column=max_col)
        # Make the merged cell bold
        italy_sheet["A7"].font = Font(bold=True)
        # Add a medium border around the merged cell
        medium_side = Side(style="medium")
        medium_border = Border(left=medium_side, right=medium_side, top=medium_side, bottom=medium_side)
        for col in range(1, max_col + 1):
            cell = italy_sheet.cell(row=7, column=col)
            cell.border = medium_border

        # Write data rows with one row per partner, months as columns
        for partner in all_partners:
            row = [partner]
            for date in all_dates:
                # Correct calculation:
                mt = results[partner][date][0].get('import_qty', 0) - results[partner][date][2].get('export_qty', 0)
                euro = results[partner][date][1].get('import_val', 0) - results[partner][date][3].get('export_val', 0)
                per_mt = euro / mt if mt != 0 else 0
                row.extend([
                    mt if mt != 0 else "-",
                    euro if euro != 0 else "-",
                    per_mt if per_mt != 0 else "-"
                ])
            italy_sheet.append(row)
            last_row = italy_sheet.max_row
            for col_idx in range(2, italy_sheet.max_column + 1):
                cell = italy_sheet.cell(row=last_row, column=col_idx)
                cell.number_format = '#,##0;(#,##0)'

        # Set fixed column widths
        italy_sheet.column_dimensions["A"].width = 24
        for col in range(2, italy_sheet.max_column + 1):
            col_letter = get_column_letter(col)
            italy_sheet.column_dimensions[col_letter].width = 10

        thin_border = Border(
            left=Side(style="thin"),
            right=Side(style="thin"),
            top=Side(style="thin"),
            bottom=Side(style="thin")
        )

        for row in italy_sheet.iter_rows(min_row=1, max_row=italy_sheet.max_row, min_col=1, max_col=italy_sheet.max_column):
            for cell in row:
                cell.border = thin_border

        # --- Add medium vertical borders to Market sheet after each month group of 3 columns ---
        medium_border = Border(left=medium_side, right=medium_side, top=medium_side, bottom=medium_side)
        for date_idx, date in enumerate(all_dates):
            col_end = 1 + (date_idx + 1) * 3  # 1-based: first col = product, months start at 2
            for row_idx in range(3, italy_sheet.max_row + 1):  # starting from header row 3
                cell = italy_sheet.cell(row=row_idx, column=col_end)
                cell.border = Border(
                    left=cell.border.left,
                    right=medium_side,
                    top=cell.border.top,
                    bottom=cell.border.bottom,
                )

        # --- Apply medium border around entire data table (rows 3 to max_row, columns 1 to max_column) ---
        for row_idx in range(3, italy_sheet.max_row + 1):
            for col_idx in range(1, italy_sheet.max_column + 1):
                cell = italy_sheet.cell(row=row_idx, column=col_idx)
                current_border = cell.border
                new_border = Border(
                    left=medium_side if col_idx == 1 else current_border.left,
                    right=medium_side if col_idx == italy_sheet.max_column else current_border.right,
                    top=medium_side if row_idx == 3 else current_border.top,
                    bottom=medium_side if row_idx == italy_sheet.max_row else current_border.bottom
                )
                cell.border = new_border

        # --- Apply medium border around merged row 7 ---
        for col_idx in range(1, italy_sheet.max_column + 1):
            cell = italy_sheet.cell(row=7, column=col_idx)
            cell.border = medium_border

        # --- Apply medium top border for header rows 3 and 4 columns 2+ ---
        for row_idx in [3, 4]:
            for col_idx in range(2, italy_sheet.max_column + 1):
                cell = italy_sheet.cell(row=row_idx, column=col_idx)
                current_border = cell.border
                cell.border = Border(
                    left=current_border.left,
                    right=current_border.right,
                    top=medium_side,
                    bottom=current_border.bottom
                )

        # --- Apply medium left border for columns 2 in header rows 3 and 4 ---
        for row_idx in [3, 4]:
            cell = italy_sheet.cell(row=row_idx, column=2)
            current_border = cell.border
            cell.border = Border(
                left=medium_side,
                right=current_border.right,
                top=current_border.top,
                bottom=current_border.bottom
            )

        # --- Apply medium right border to column 1 cells in Market sheet ---
        for row_idx in range(3, italy_sheet.max_row + 1):
            cell = italy_sheet.cell(row=row_idx, column=1)
            current_border = cell.border
            cell.border = Border(
                left=current_border.left,
                right=medium_side,
                top=current_border.top,
                bottom=current_border.bottom
            )

        # Right align all data rows (row 5 and below, columns 2 and beyond)
        right_align = Alignment(horizontal='right')
        for row in italy_sheet.iter_rows(min_row=5, max_row=italy_sheet.max_row, min_col=2, max_col=italy_sheet.max_column):
            for cell in row:
                cell.alignment = right_align

        # Apply light blue fill to first column for rows 8 and below (after borders)
        for row in italy_sheet.iter_rows(min_row=8, max_row=italy_sheet.max_row, min_col=1, max_col=1):
            for cell in row:
                cell.fill = col1_fill

        # Clear border from rows 1 and 2
        no_border = Border(left=Side(border_style=None),
                           right=Side(border_style=None),
                           top=Side(border_style=None),
                           bottom=Side(border_style=None))
        for row in italy_sheet.iter_rows(min_row=1, max_row=2, min_col=1, max_col=italy_sheet.max_column):
            for cell in row:
                cell.border = no_border

        # ----------------- CREATE YEARLY MARKET SHEET -----------------
        yearly_sheet_name = f"{country} market yearly"
        if yearly_sheet_name in workbook.sheetnames:
            del workbook[yearly_sheet_name]
        yearly_sheet = workbook.create_sheet(yearly_sheet_name)

        # Group dates by year
        year_to_months = defaultdict(list)
        for date in all_dates:
            year, month = date.split("-")
            year_to_months[year].append(month)

        year_list = sorted(year_to_months.keys(), reverse=True)

        # Sort partners by descending MT for the second last year
        sorted_years = sorted(year_list)
        if len(sorted_years) < 2:
            sort_year = sorted_years[-1]
        else:
            sort_year = sorted_years[-2]

        def partner_mt_for_sort_year(partner):
            mt = 0
            for month in year_to_months[sort_year]:
                date_key = f"{sort_year}-{month}"
                mt += results[partner][date_key][0].get('import_qty', 0) - results[partner][date_key][2].get('export_qty', 0)
            return mt

        def partner_sort_key(partner):
            mt = partner_mt_for_sort_year(partner)
            # Positive first, then negative, then zero
            if mt > 0:
                return (0, -mt)  # positive, descending
            elif mt < 0:
                return (1, mt)   # negative, ascending (less negative first)
            else:
                return (2, 0)    # zero last

        all_partners = sorted(all_partners, key=partner_sort_key)

        # Determine the latest year and month
        last_year = year_list[0]
        last_month_num = max(map(int, year_to_months[last_year]))
        last_month_name = month_name[last_month_num]

        # Insert top rows and title message
        yearly_sheet.insert_rows(1, amount=2)
        yearly_sheet["A2"] = f"{country} market for the years {year_list[-1]} to {year_list[0]} till {last_month_name}"
        yearly_sheet.merge_cells("A2:C2")
        yearly_sheet["A2"].font = Font(bold=True)

        # Copy header structure
        yearly_sheet.merge_cells(start_row=3, start_column=1, end_row=4, end_column=1)
        yearly_sheet.cell(row=3, column=1, value="PRODUCT (Labels)")
        yearly_sheet["A3"].fill = header_fill
        yearly_sheet["A4"].fill = header_fill
        for row in range(3, 5):
            yearly_sheet.cell(row=row, column=1).border = full_border

        # Fill monthly headers by year
        col_idx = 2
        for year in year_list:
            yearly_sheet.merge_cells(start_row=3, start_column=col_idx, end_row=3, end_column=col_idx+2)
            yearly_sheet.cell(row=3, column=col_idx, value=year)
            # Color and border for the year header block
            for i in range(3):
                cell = yearly_sheet.cell(row=3, column=col_idx + i)
                cell.fill = header_fill
                cell.font = Font(bold=True)
                cell.alignment = Alignment(horizontal='center')
                left = Side(style="medium") if i == 0 else cell.border.left
                right = Side(style="medium") if i == 2 else cell.border.right
                cell.border = Border(
                    left=left,
                    right=right,
                    top=Side(style="medium"),
                    bottom=Side(style="medium")
                )
            # Add MT, ‚Ç¨, ‚Ç¨/MT headings in row 4
            yearly_sheet.cell(row=4, column=col_idx, value="MT")
            yearly_sheet.cell(row=4, column=col_idx + 1, value="‚Ç¨")
            yearly_sheet.cell(row=4, column=col_idx + 2, value="‚Ç¨/MT")
            for i in range(3):
                cell = yearly_sheet.cell(row=4, column=col_idx + i)
                cell.fill = header_fill
                cell.font = Font(bold=True)
                cell.alignment = Alignment(horizontal='center')
            col_idx += 3

        # Add TOTAL MARKET row
        yearly_sheet.insert_rows(5)
        total_row = ["TOTAL MARKET"]
        for year in year_list:
            total_mt = 0
            total_euro = 0
            for partner in all_partners:
                mt = 0
                euro = 0
                for month in year_to_months[year]:
                    date_key = f"{year}-{month}"
                    mt += results[partner][date_key][0].get('import_qty', 0) - results[partner][date_key][2].get('export_qty', 0)
                    euro += results[partner][date_key][1].get('import_val', 0) - results[partner][date_key][3].get('export_val', 0)

                total_mt += mt
                total_euro += euro
            per_mt = total_euro / total_mt if total_mt != 0 else 0
            total_row.extend([total_mt, total_euro, per_mt])
        for col_index, val in enumerate(total_row, start=1):
            cell = yearly_sheet.cell(row=5, column=col_index, value=val if val != 0 else "-")
            cell.fill = total_fill
            cell.font = Font(bold=True)
            cell.number_format = '#,##0;(#,##0)'
            cell.border = full_border
        # PRODUCTION label
        yearly_sheet["A6"] = "PRODUCTION"
        yearly_sheet["A6"].border = full_border
        # Import net of export row
        yearly_sheet["A7"] = "import net of export"
        yearly_sheet.merge_cells(start_row=7, start_column=1, end_row=7, end_column=yearly_sheet.max_column)
        yearly_sheet["A7"].font = Font(bold=True)
        for col in range(1, yearly_sheet.max_column + 1):
            cell = yearly_sheet.cell(row=7, column=col)
            cell.border = medium_border
        # Partner rows
        for partner in all_partners:
            row = [partner]
            for year in year_list:
                mt = 0
                euro = 0
                for month in year_to_months[year]:
                    date_key = f"{year}-{month}"
                    # Correct calculation:
                    mt += results[partner][date_key][0].get('import_qty', 0) - results[partner][date_key][2].get('export_qty', 0)
                    euro += results[partner][date_key][1].get('import_val', 0) - results[partner][date_key][3].get('export_val', 0)
                per_mt = euro / mt if mt != 0 else 0
                row.extend([
                    mt if mt != 0 else "-",
                    euro if euro != 0 else "-",
                    per_mt if per_mt != 0 else "-"
                ])
            yearly_sheet.append(row)
            last_row = yearly_sheet.max_row
            for col_idx in range(2, yearly_sheet.max_column + 1):
                cell = yearly_sheet.cell(row=last_row, column=col_idx)
                cell.number_format = '#,##0;(#,##0)'
                cell.alignment = right_align
        # Apply column widths
        yearly_sheet.column_dimensions["A"].width = 24
        for col in range(2, yearly_sheet.max_column + 1):
            col_letter = get_column_letter(col)
            yearly_sheet.column_dimensions[col_letter].width = 15
        # Fill first column from row 8 down
        for row in yearly_sheet.iter_rows(min_row=8, max_row=yearly_sheet.max_row, min_col=1, max_col=1):
            for cell in row:
                cell.fill = col1_fill

        # --- Add medium right border after each year group in yearly_sheet ---
        for year_idx in range(len(year_list)):
            col_end = 1 + (year_idx + 1) * 3  # Each year block is 3 columns (MT, ‚Ç¨, ‚Ç¨/MT)
            for row_idx in range(3, yearly_sheet.max_row + 1):  # From header row 3 to last row
                cell = yearly_sheet.cell(row=row_idx, column=col_end)
                current_border = cell.border
                cell.border = Border(
                    left=current_border.left,
                    right=Side(style="medium"),
                    top=current_border.top,
                    bottom=current_border.bottom
                )

        # --- Add medium right border after partner name column (column 1) ---
        for row_idx in range(3, yearly_sheet.max_row + 1):
            cell = yearly_sheet.cell(row=row_idx, column=1)
            current_border = cell.border
            cell.border = Border(
                left=current_border.left,
                right=Side(style="medium"),
                top=current_border.top,
                bottom=current_border.bottom
            )

        workbook.save(filepath)
        log_debug(f"üíæ Saved workbook '{filename}'")

        # --- Rename the file to <country>.<last_year>-<last_month>.xlsx ---
        # Clean up country name for filename (remove spaces and special chars)
        safe_country = re.sub(r'[^A-Za-z0-9]+', '_', country).strip('_')
        new_filename = f"{safe_country}.{last_year}-{str(last_month_num).zfill(2)}.xlsx"
        if filename != new_filename:
            os.rename(filepath, os.path.join(folder, new_filename))
            log_debug(f"üìù Renamed to '{new_filename}'")

    except FileNotFoundError:
        log_debug(f"File '{filename}' not found", is_error=True)
    except Exception as e:
        log_debug(f"Error processing '{filename}': {e}", is_error=True)

def combine_last_sheets_from_final_files(country_list, output_filename):

    found_files = []
    for country in country_list:
        safe_country = re.sub(r'[^A-Za-z0-9]+', '_', country).strip('_')
        for fname in os.listdir(folder):
            if fname.lower().startswith(safe_country.lower()) and fname.lower().endswith(".xlsx"):
                found_files.append((country, os.path.join(folder, fname)))
                break
    
    if not found_files:
        log_debug(f"No files found for {output_filename}", is_error=True)
        return

    log_debug(f"üîó Combining {len(found_files)} files for {output_filename}")
    combined_wb = Workbook()
    combined_wb.remove(combined_wb.active)

    for country, matching_file in found_files:
        wb = load_workbook(matching_file)
        last_sheet = wb[wb.sheetnames[-1]]
        new_sheet = combined_wb.create_sheet(title=country)

        for col_letter, dim in last_sheet.column_dimensions.items():
            new_sheet.column_dimensions[col_letter].width = dim.width

        for merged_range in last_sheet.merged_cells.ranges:
            new_sheet.merge_cells(str(merged_range))

        for row in last_sheet.iter_rows():
            for cell in row:
                new_cell = new_sheet.cell(row=cell.row, column=cell.column, value=cell.value)
                if cell.has_style:
                    if cell.font:
                        new_cell.font = cell.font.copy()
                    if cell.border:
                        new_cell.border = cell.border.copy()
                    if cell.fill:
                        new_cell.fill = cell.fill.copy()
                    if cell.number_format:
                        new_cell.number_format = cell.number_format
                    if cell.protection:
                        new_cell.protection = cell.protection.copy()
                    if cell.alignment:
                        new_cell.alignment = cell.alignment.copy()

    combined_path = os.path.join(folder, output_filename)
    combined_wb.save(combined_path)
    log_debug(f"üìã Created combined file: {output_filename}")

combine_last_sheets_from_final_files(
    country_list=["Italy", "Romania", "Croatia", "Slovenia", "Slovakia", "Hungary", "Bulgaria"],
    output_filename="Markets relating to Mr Firpo.xlsx"
)

combine_last_sheets_from_final_files(
    country_list=["France", "Germany", "Belgium", "Greece"],
    output_filename="France office related market.xlsx"
)

combine_last_sheets_from_final_files(
    country_list=["Spain", "Portugal"],
    output_filename="3.xlsx"
)

# Save debug log
debug_file_path = os.path.join(folder, "debug_log.txt")
with open(debug_file_path, 'w', encoding='utf-8') as f:
    f.write("üöÄ EUROSTAT TRADE AUTOMATION DEBUG LOG\n")
    f.write("=" * 50 + "\n\n")
    for entry in debug_log:
        f.write(entry + "\n")
    f.write("\n" + "=" * 50 + "\n")
    f.write("üèÅ Processing completed")